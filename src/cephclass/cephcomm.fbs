
namespace faasm.ndpmsg;

table WasmInfo {
    user: string;
    function: string;
    fptr: int32;
    pyptr: int32;
    args: [int32];
}

table ObjectInfo {
    bucket: string;
    key: string;
}

// (First message) Sent by Compute Faasm -> Storage Ceph
table NdpRequest {
    call_id: uint64;
    wasm: WasmInfo;
    object: ObjectInfo;
    origin_host: string;
}

enum NdpResult: ubyte {
    // Processed remotely, data is a memory delta
    Ok = 0,
    // Processing refused due to high load
    ProcessLocally,
    // An error happened during processing
    Error
}

// (Last message) Sent by Storage Ceph -> Compute Faasm once all processing ends
table NdpResponse {
    call_id: uint64;
    result: NdpResult;
    error_msg: string;
}

// Storage Ceph<->Storage Faasm messages
table NdpRead {
    offset: uint64;
    upto_length: uint64;
}

table NdpWrite {
    offset: uint64;
    data: [ubyte];
}

table NdpEnd {
    result: NdpResult;
    error_msg: [ubyte];
}

union TypedStorageMessage {
    NdpRead,
    NdpWrite,
    NdpEnd
}

// Unions can't be used as root elements
table StorageMessage {
    call_id: uint64;
    message: TypedStorageMessage;
}
